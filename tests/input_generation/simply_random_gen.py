# ------------------------------------------------------------------
#
#	Create a random (i.e. not real) population for testing of input 
#		verification code
#
#	- This creates something that should be a valid population,
#		invalid cases are generated by the test itself
#
# ------------------------------------------------------------------

import sys
py_path = '../../scripts/'
sys.path.insert(0, py_path)

import create_population as cpop

#
# Population settings 
#

# Number of agents and initially infected agents
n_agents = 10
n_infected = 3	

# Number of agents in schools and workplaces
n_ags = 3
n_awk = 6

# Number of houses, schools, and workplaces
nh = 5
ns = 2
nw = 6

# Spatial limits, km
sp_lim_x = [10, 150]
sp_lim_y = [100, 120]

#
# Generate
#

houses = cpop.Houses(nh, sp_lim_x, sp_lim_y)
schools = cpop.Schools(ns, sp_lim_x, sp_lim_y)	
works = cpop.Works(nw, sp_lim_x, sp_lim_y)
	
agents = cpop.Agents(n_agents, nh, n_ags, n_awk, n_infected)
agents.distribute(houses, schools, works)

#
# Save to files
#
		
with open('test_data/sr_agents_data.txt', 'w') as fout:
	fout.write(repr(agents))

with open('test_data/sr_houses_data.txt', 'w') as fout:
	fout.write(repr(houses))

with open('test_data/sr_schools_data.txt', 'w') as fout:
	fout.write(repr(schools))

with open('test_data/sr_workplaces_data.txt', 'w') as fout:
	fout.write(repr(works))

